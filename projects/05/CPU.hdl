// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to restart the current
                        // program (reset==1) or continue executing
                        // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // Address of next instruction

  PARTS:
  Not(in=instruction[15], out=a);
  Not(in=a, out=c);
  And(a=c, b=instruction[5], out=alu-to-a);
  Mux16(a=instruction, b=alu-out, sel=alu-to-a, out=a-in);
  Or(a=a, b=alu-to-a, out=load-a);
  ARegister(in=a-in, load=load-a, out=a-out);
  Mux16(a=a-out, b=inM, sel=instruction[12], out=a-m-out);
  And(a=c, b=instruction[4], out=load-d);
  DRegister(in=alu-out, load=load-d, out=d-out);
  ALU(x=d-out, y=a-m-out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu-out, zr=zr-out, ng=ng-out);
  Or16(a=false, b=a-out, out[0..14]=addressM);
  Or16(a=false, b=alu-out, out=outM);
  And(a=c, b=instruction[3], out=writeM);
  And(a=zr-out, b=instruction[1], out=jeq);
  And(a=ng-out, b=instruction[2], out=jlt);
  Or(a=zr-out, b=ng-out, out=zero-neg);
  Not(in=zero-neg, out=pos);
  And(a=pos, b=instruction[0], out=jgt);
  Or(a=jeq, b=jlt, out=jle);
  Or(a=jle, b=jgt, out=jump-a);
  And(a=c, b=jump-a, out=pc-load);
  Not(in=pc-load, out=pc-inc);
  PC(in=a-out, inc=pc-inc, load=pc-load, reset=reset, out[0..14]=pc);
}
